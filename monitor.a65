            .ORG    $F000 ; ROM
            .ENT    $ ; ASM80.COM - emulator start
            .ENGINE 6502 ; ASM80.COM - emulator definition

RESET:              
                    ; Stack
            LDX     #$FF 
            TXS     

            JSR     init 
            JSR     print_hello 

LOOP:
			JSR 	read_key
            JMP 	loop


INIT:               
            JSR     serial_init
            LDA		#$0
            STA		console_address
            STA		console_address+1            

            RTS     


READ_KEY:           
            JSR     primm ; print command promnt
            DB      $0D,$0A,">> ",$00 

READ_KEY_LOOP:      
            JSR     read_char ; read character

            JSR     primm 
            DB      $0D,$0A,$00 ; with new line

            CMP     #$48 ; H - Help
            BEQ     cmd_help 

            CMP     #$41 ; A - Set Address
            BEQ     cmd_address

            CMP     #$43 ; C - Change Memory
            BEQ     cmd_change 

            CMP     #$4D ; M - Show Memory
            BEQ     cmd_show 

            CMP     #$47 ; G - Go
            BEQ     cmd_go 

            CMP     #$52 ; R - Registers
            BEQ     cmd_req 

            JSR     cmd_unknown ; something else


            RTS


CMD_HELP:           
            JMP     print_help 

CMD_ADDRESS:
			JMP		set_address

CMD_CHANGE:         
            JMP     change_memory 

CMD_SHOW:           
            JMP     show_memory 

CMD_GO:             
            JMP     go_memory 

CMD_REQ:            
            JMP     print_regs 



CMD_UNKNOWN:        
            JSR     primm 
            DB      "Unknown command, press H for help",$0D,$0A,$00 

            RTS     



PRINT_HELLO:        
            JSR     primm 
            DB      $0C,"Wellcome to the machine 6502, press H for help, ",$00 
            JSR     primm 
            DB      "(c) 2017 vaclav@slajs.xyz",$0D,$0A,$00 

            RTS     

PRINT_HELP:         
            JSR     primm 
            DB      "Available commands:",$0D,$0A,$00 
            JSR     primm 
            DB      " A - Set Address",$0D,$0A,$00 
            JSR     primm             
            DB      " M - Show Memmory",$0D,$0A,$00 
            JSR     primm 
            DB      " C - Change Memory",$0D,$0A,$00 
            JSR     primm 
            DB      " G - Go To the Address",$0D,$0A,$00 
            JSR     primm 
            DB      " R - Show Registers",$0D,$0A,$00 

            RTS     

PRINT_REGS:         
            JSR     primm 
            DB      "A = ",$00 
            STA     console_data 
            JSR     print_byte 

            JSR     primm 
            DB      ", X = ",$00 
            STX     console_data 
            JSR     print_byte 

            JSR     primm 
            DB      ", Y = ",$00 
            STY     console_data 
            JSR     print_byte 

            JSR     print_nl 

            RTS     

SHOW_MEMORY:        
            JSR     get_address 

            JSR     primm 
            DB      "Data: 0x",$00 
                    ; Read byte from address and print it
            LDX     #$00 
            LDA     (console_address,X) 
            STA     console_data 
            JSR     print_byte 
            JSR     print_nl 

            RTS     

CHANGE_MEMORY:      
            JSR     get_address 

            JSR     primm 
            DB      "Data: 0x",$00 
                    ; Read byte from address and print it
            LDX     #$00 
            LDA     (console_address,X) 
            STA     console_data 
            JSR     print_byte 
            JSR     print_nl 

            JSR     primm 
            DB      "New Data: 0x",$00 
            JSR     read_byte 
            LDA     console_data 
                    ; Write byte to address
            LDX     #$00 
            STA     (console_address,X) 
            JSR     print_nl 

            RTS     


GO_MEMORY:
            JSR     get_address 
            JMP     (console_address) 

SET_ADDRESS:
            JSR     primm 
            DB      "Enter Address: 0x",$00 
            JSR     read_address 
            JSR     print_nl 
            
            RTS

GET_ADDRESS:
			; is one of address bytes non zero?
			LDA		console_address
            BNE		gt_done
            
            LDA		console_address+1
            BNE		gt_done
            
			JSR 	set_address
            
GT_DONE:
            RTS


            .INCLUDE serial.a65 
            .INCLUDE console.a65 

                    ; -----------------------------------
                    ; ------ Adresses Definitions -------
                    ; -----------------------------------

            .ORG    $FFFA 
            DW      reset ; NMI
            DW      reset 
            DW      reset ; RESET
            DW      reset 
            DW      reset ; IRQ
            DW      reset 

